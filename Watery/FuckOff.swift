//
//  FuckOff.swift
//  ProjectName
//
//  Created by AuthorName on 21.11.20.
//  Copyright Â© 2020 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class FuckOff : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 240, height: 310), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 240, height: 310), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 240, y: resizedFrame.height / 310)


        //// Color Declarations
        let fillColor = UIColor(red: 0.996, green: 0.996, blue: 0.995, alpha: 1.000)
        let strokeColor = UIColor(red: 0.137, green: 0.122, blue: 0.125, alpha: 1.000)

        //// Untitled-1 Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 59.35, y: 309.78))
        bezierPath.addLine(to: CGPoint(x: -0.22, y: 0.22))
        bezierPath.addLine(to: CGPoint(x: 240.22, y: 0.22))
        bezierPath.addLine(to: CGPoint(x: 180.65, y: 309.78))
        bezierPath.addLine(to: CGPoint(x: 59.35, y: 309.78))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 59.35, y: 309.78))
        bezier2Path.addLine(to: CGPoint(x: -0.22, y: 0.22))
        bezier2Path.addLine(to: CGPoint(x: 240.22, y: 0.22))
        bezier2Path.addLine(to: CGPoint(x: 180.65, y: 309.78))
        bezier2Path.addLine(to: CGPoint(x: 59.35, y: 309.78))
        bezier2Path.close()
        strokeColor.setStroke()
        bezier2Path.lineWidth = 0.77
        bezier2Path.miterLimit = 0.77
        bezier2Path.stroke()
        
        context.restoreGState()

    }




    @objc(FuckOffResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
